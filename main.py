import os
import schedule
import time
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
from services.health import HealthService
from services.calendar_service import GoogleCalendarService
from services.weather_service import WeatherService
from services.news_service import NewsService
from services.email_service import EmailService
from services.gemini_service import GeminiService
from services.canvas_service import CanvasService
from services.database_service import DatabaseService
from services.email_listener_service import EmailListenerService

# Load environment variables and print debug info
load_dotenv(override=True)  # Force override of existing env vars
print("\nChecking configuration:")
print(f"Loading environment from: {os.path.abspath('.env')}")
print(f"Current working directory: {os.getcwd()}")
print(f"EMAIL_TEST_MODE direct from file:", end=" ")
try:
    with open('.env', 'r') as f:
        for line in f:
            if line.startswith('EMAIL_TEST_MODE='):
                print(f"'{line.strip()}'")
                break
except Exception as e:
    print(f"Error reading .env file: {str(e)}")
print(f"EMAIL_TEST_MODE from env: '{os.getenv('EMAIL_TEST_MODE')}'")
print(f"Email configured: {bool(os.getenv('EMAIL_ADDRESS') and os.getenv('EMAIL_PASSWORD'))}")
print(f"Canvas configured: {bool(os.getenv('CANVAS_API_KEY'))}")
print(f"Loading from: {os.path.abspath('.env')}\n")

class MorningDigest:
    def __init__(self):
        self.health = HealthService(
            os.getenv('HEALTH_DATA_PATH', 'data/health')
        )
        self.calendar = GoogleCalendarService()
        self.weather = WeatherService(os.getenv('WEATHER_API_KEY'))
        self.news = NewsService()
        self.canvas = CanvasService()
        self.email = EmailService(
            os.getenv('EMAIL_ADDRESS'),
            os.getenv('EMAIL_PASSWORD')
        )
        self.gemini = GeminiService()
        self.db = DatabaseService()
        self.email_listener = EmailListenerService(
            os.getenv('EMAIL_ADDRESS'),
            os.getenv('EMAIL_PASSWORD'),
            self.db
        )

    def generate_digest(self):
        try:
            today = datetime.now()
            tomorrow = today + timedelta(days=1)

            # Gather raw data
            health_data = self.health.get_daily_summary()
            calendar_events = self.calendar.get_events(today, tomorrow)
            weather_info = self.weather.get_daily_forecast()
            news_updates = self.news.get_top_stories()
            assignments = self.canvas.get_assignments()

            # Store the digest data in the database
            self.db.store_digest(
                health_data,
                calendar_events,
                weather_info,
                news_updates,
                assignments
            )

            # Try to get Gemini-generated content
            gemini_content = self.gemini.generate_email(
                health_data,
                calendar_events,
                weather_info,
                news_updates,
                assignments
            )

            # Use Gemini content if available, otherwise fall back to default formatting
            content = gemini_content if gemini_content else self._format_email_content(
                health_data,
                calendar_events,
                weather_info,
                news_updates,
                assignments
            )

            self.email.send_digest(content)
            print(f"Morning digest sent successfully at {datetime.now()}")

        except Exception as e:
            print(f"Error generating digest: {str(e)}")

    def _format_email_content(self, health_data, events, weather, news, assignments):
        # Fallback formatting if Gemini is not available
        return f"""<html><body style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 10px;">
<h1 style="margin: 0 0 10px 0">Morning Digest - {datetime.now().strftime('%A, %B %d')}</h1>
<h2 style="margin: 10px 0 5px 0">üìö Canvas Assignments</h2>{self._format_assignments(assignments)}
<h2 style="margin: 10px 0 5px 0">üèÉ‚Äç‚ôÇÔ∏è Health Summary</h2>{self._format_health_data(health_data)}
<h2 style="margin: 10px 0 5px 0">üìÖ Schedule</h2>{self._format_calendar_events(events)}
<h2 style="margin: 10px 0 5px 0">üå§Ô∏è Weather</h2>{self._format_weather(weather)}
<h2 style="margin: 10px 0 5px 0">üì∞ News</h2>{self._format_news(news)}
<hr style="margin: 10px 0"><p style="color: #666; font-size: 12px; margin: 0">Generated by Your Personal Assistant</p>
</body></html>"""

    def _format_health_data(self, data):
        return f"<ul style='margin: 0; padding-left: 20px'>{data}</ul>"

    def _format_calendar_events(self, events):
        return f"<ul style='margin: 0; padding-left: 20px'>{events}</ul>"

    def _format_weather(self, weather):
        return weather

    def _format_news(self, news):
        return f"<ul style='margin: 0; padding-left: 20px'>{news}</ul>"

    def _format_assignments(self, assignments):
        return f"<ul style='margin: 0; padding-left: 20px'>{assignments}</ul>"

def main():
    digest = MorningDigest()
    
    # Start the email listener service
    digest.email_listener.start()
    print("Email listener service started...")
    
    # Check for immediate send argument
    if len(sys.argv) > 1 and sys.argv[1] == "send":
        print("\nSending digest immediately...")
        digest.generate_digest()
        return
    
    # Run in test mode (print to console)
    if os.getenv('EMAIL_TEST_MODE', 'true').lower() == 'true':
        print("\nRunning test digest (preview mode)...")
        digest.generate_digest()
        return
    
    # Regular scheduled mode
    schedule.every().day.at("07:00").do(digest.generate_digest)
    print("Morning Digest Assistant is running...")
    print("Scheduled to send digest every day at 7:00 AM")
    print("Email listener is active - waiting for incoming messages")
    print("(Use 'python main.py send' to send immediately)")
    
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)
    except KeyboardInterrupt:
        print("\nShutting down services...")
        digest.email_listener.stop()
        print("Goodbye!")
        sys.exit(0)

if __name__ == "__main__":
    main() 